name: CI/CD Pipeline for Upbit Auto Bot

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  schedule:
    - cron: '0 0 * * 0' # Every Sunday at midnight UTC

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install linter
        run: pip install ruff

      - name: Run linter
        run: ruff check .

  build-and-push-to-dockerhub:
    runs-on: ubuntu-latest
    needs: lint
    if: github.event_name == 'push' || github.event_name == 'schedule'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/upbit-auto-bot:latest

  download-data:
    runs-on: ubuntu-latest
    needs: lint
    if: github.event_name == 'push' || github.event_name == 'schedule'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      
      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('''**/requirements.txt''') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Install pandas-ta from source
        run: pip install git+https://github.com/aarigs/pandas-ta.git

      - name: Download latest data
        run: python main.py --mode download --start-date $(date -d '1 month ago' +%Y-%m-%d) --end-date $(date +%Y-%m-%d)

      - name: Upload data directory as artifact
        uses: actions/upload-artifact@v4
        with:
          name: historical-data
          path: data/

  preprocess-data:
    runs-on: ubuntu-latest
    needs: download-data
    if: github.event_name == 'push' || github.event_name == 'schedule'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download historical data artifact
        uses: actions/download-artifact@v4
        with:
          name: historical-data
          path: data/

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('''**/requirements.txt''') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Install pandas-ta from source
        run: pip install git+https://github.com/aarigs/pandas-ta.git

      - name: Preprocess data
        run: python main.py --mode preprocess --start-date 2018-01-01 --end-date $(date +%Y-%m-%d)

      - name: Upload cache directory as artifact
        uses: actions/upload-artifact@v4
        with:
          name: preprocessed-cache
          path: cache/

  train-rl-agent:
    runs-on: ubuntu-latest
    needs: preprocess-data
    if: github.event_name == 'push' || github.event_name == 'schedule'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download preprocessed cache artifact
        uses: actions/download-artifact@v4
        with:
          name: preprocessed-cache
          path: cache/

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('''**/requirements.txt''') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Install pandas-ta from source
        run: pip install git+https://github.com/aarigs/pandas-ta.git

      - name: Train RL agent
        run: python main.py --mode train-rl --start-date 2018-01-01 --end-date $(date +%Y-%m-%d)

      - name: Upload RL agent artifact
        uses: actions/upload-artifact@v4
        with:
          name: trading-agent
          path: trading_agent.zip

  deploy-agent-to-ec2:
    runs-on: ubuntu-latest
    needs: train-rl-agent
    if: github.event_name == 'push' || github.event_name == 'schedule'
    steps:
      - name: Download RL agent artifact
        uses: actions/download-artifact@v4
        with:
          name: trading-agent
          path: .

      - name: Transfer RL agent to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.AWS_EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.AWS_SSH_PRIVATE_KEY }}
          source: "trading_agent.zip"
          target: "/home/ec2-user/"

  deploy-application-to-ec2:
    runs-on: ubuntu-latest
    needs: [build-and-push-to-dockerhub, deploy-agent-to-ec2]
    if: github.event_name == 'push' || github.event_name == 'schedule'
    steps:
      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AWS_EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.AWS_SSH_PRIVATE_KEY }}
          script: |
            set -e

            echo "### Cleaning up EC2 instance space ###"
            rm -f /home/ec2-user/trading_agent.zip
            find /home/ec2-user/ -name "*.log" -type f -delete
            echo "Previous artifacts and logs removed."

            echo "### Pruning Docker system ###"
            docker system prune -a -f

            # Set container names and image name
            CONTAINER_NAME="upbit-auto-bot-container"
            OLD_CONTAINER_NAME="upbit-auto-bot-container-old"
            IMAGE_NAME="${{ secrets.DOCKERHUB_USERNAME }}/upbit-auto-bot:latest"

            echo "### Starting Blue-Green Deployment ###"
            docker pull $IMAGE_NAME

            # Check if a container is currently running
            if [ "$(docker ps -q -f name=$CONTAINER_NAME)" ]; then
              echo "Current version found. Renaming $CONTAINER_NAME to $OLD_CONTAINER_NAME"
              docker rename $CONTAINER_NAME $OLD_CONTAINER_NAME
            fi

            echo "Starting new version: $CONTAINER_NAME"
            docker run -d --name $CONTAINER_NAME \
              -e UPBIT_ACCESS_KEY="${{ secrets.UPBIT_ACCESS_KEY }}" \
              -e UPBIT_SECRET_KEY="${{ secrets.UPBIT_SECRET_KEY }}" \
              -e GEMINI_API_KEY="${{ secrets.GEMINI_API_KEY }}" \
              -v /home/ec2-user/trading_agent.zip:/app/trading_agent.zip \
              $IMAGE_NAME \
              python main.py --mode start-commander

            echo "Waiting for 15 seconds for health check..."
            sleep 15

            # Health check: See if the new container is up and running
            if ! [ "$(docker ps -q -f name=$CONTAINER_NAME)" ]; then
              echo "New container failed to start! Rolling back."
              # Remove the failed container if it exists in a stopped state
              docker rm $CONTAINER_NAME || true
              # Rename the old container back, if it exists
              if [ "$(docker ps -a -q -f name=$OLD_CONTAINER_NAME)" ]; then
                docker rename $OLD_CONTAINER_NAME $CONTAINER_NAME
                echo "Rollback successful. Previous version is running."
              else
                echo "No previous version to roll back to."
              fi
              exit 1
            else
              echo "New container started successfully."
              # Stop and remove the old container if it exists
              if [ "$(docker ps -a -q -f name=$OLD_CONTAINER_NAME)" ]; then
                echo "Stopping and removing old version: $OLD_CONTAINER_NAME"
                docker stop $OLD_CONTAINER_NAME
                docker rm $OLD_CONTAINER_NAME
              fi
              echo "Deployment successful."
            fi