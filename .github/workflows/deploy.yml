# .github/workflows/deploy.yml

name: Train and Deploy Trading Bot

on:
  # 1. Manual trigger for both training and deployment
  workflow_dispatch:
    inputs:
      job_type:
        description: 'Job to run: train_and_deploy, or deploy_only'
        required: true
        default: 'deploy_only'
        type: choice
        options:
          - train_and_deploy
          - deploy_only

  # 2. Scheduled training run
  schedule:
    - cron: '0 0 * * 0' # Every Sunday at midnight UTC

  # 3. Automatic deployment on push to main
  push:
    branches:
      - main

jobs:
  # LINTING JOB: Runs on every push and PR to main
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Install linter
        run: pip install ruff
      - name: Run linter
        run: ruff check .

  # TRAINING JOB: Runs on schedule or manually
  train-model:
    runs-on: ubuntu-latest
    needs: lint
    # Run only on schedule or when manually dispatched for training
    if: |
      github.event_name == 'schedule' || 
      (github.event_name == 'workflow_dispatch' && github.event.inputs.job_type == 'train_and_deploy')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
      - name: Install dependencies
        run: pip install -r requirements.txt
      - name: Download data
        run: python main.py --mode download --start-date $(date -d '3 months ago' +%Y-%m-%d) --end-date $(date +%Y-%m-%d)
      - name: Preprocess data
        run: python main.py --mode preprocess
      - name: Train XGBoost model
        run: python main.py --mode train
      - name: Upload Model Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: trained-models
          path: |
            price_predictor.pkl
            price_scaler.pkl

  # DEPLOYMENT JOB: Runs on push to main or manually
  deploy:
    runs-on: ubuntu-latest
    needs: [lint, train-model]
    # Run if it's a push to main, or a manual dispatch
    # The training job is a dependency, so this will wait for it if it runs.
    # If the training job is skipped, this will proceed after linting.
    if: |-
      always() && (
        github.event_name == 'push' ||
        github.event_name == 'workflow_dispatch'
      )
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Model Artifacts
        uses: actions/download-artifact@v4
        with:
          name: trained-models
          path: .
        # Continue even if artifact is not found (e.g., first run)
        continue-on-error: true

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push lightweight Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/upbit-auto-bot:latest

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AWS_EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.AWS_SSH_PRIVATE_KEY }}
          script: |
            set -e
            # Cleanup
            echo "### Cleaning up EC2 instance space ###"
            rm -f /home/ec2-user/*.zip /home/ec2-user/*.log
            docker system prune -a -f
            # Blue-Green Deployment
            CONTAINER_NAME="upbit-auto-bot-container"
            OLD_CONTAINER_NAME="upbit-auto-bot-container-old"
            IMAGE_NAME="${{ secrets.DOCKERHUB_USERNAME }}/upbit-auto-bot:latest"
            echo "### Starting Blue-Green Deployment ###"
            docker pull $IMAGE_NAME
            if [ "$(docker ps -q -f name=$CONTAINER_NAME)" ]; then
              docker rename $CONTAINER_NAME $OLD_CONTAINER_NAME
            fi
            docker run -d --name $CONTAINER_NAME \
              -e UPBIT_ACCESS_KEY="${{ secrets.UPBIT_ACCESS_KEY }}" \
              -e UPBIT_SECRET_KEY="${{ secrets.UPBIT_SECRET_KEY }}" \
              $IMAGE_NAME \
              python live_trader.py
            echo "Waiting for 15 seconds for health check..."
            sleep 15
            if ! [ "$(docker ps -q -f name=$CONTAINER_NAME)" ]; then
              echo "New container failed to start! Rolling back."
              docker rm $CONTAINER_NAME || true
              if [ "$(docker ps -a -q -f name=$OLD_CONTAINER_NAME)" ]; then
                docker rename $OLD_CONTAINER_NAME $CONTAINER_NAME
              fi
              exit 1
            else
              echo "New container started successfully."
              if [ "$(docker ps -a -q -f name=$OLD_CONTAINER_NAME)" ]; then
                docker stop $OLD_CONTAINER_NAME
                docker rm $OLD_CONTAINER_NAME
              fi
            fi
