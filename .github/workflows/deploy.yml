name: Deploy to AWS EC2

on:
  push:
    branches:
      - main
  schedule:
    - cron: '0 0 * * 0' # Every Sunday at midnight UTC

jobs:
  build-and-push-to-dockerhub:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/upbit-auto-bot:latest

  download-data:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Install pandas-ta from source
        run: pip install git+https://github.com/aarigs/pandas-ta.git

      - name: Download latest data
        run: python main.py --mode download --start-date $(date -d '1 month ago' +%Y-%m-%d) --end-date $(date +%Y-%m-%d)

      - name: Upload data directory as artifact
        uses: actions/upload-artifact@v4
        with:
          name: historical-data
          path: data/

  preprocess-data:
    runs-on: ubuntu-latest
    needs: download-data
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download historical data artifact
        uses: actions/download-artifact@v4
        with:
          name: historical-data
          path: data/

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Install pandas-ta from source
        run: pip install git+https://github.com/aarigs/pandas-ta.git

      - name: Preprocess data
        run: python main.py --mode preprocess --start-date 2018-01-01 --end-date $(date +%Y-%m-%d)

      - name: Upload cache directory as artifact
        uses: actions/upload-artifact@v4
        with:
          name: preprocessed-cache
          path: cache/

  train-rl-agent:
    runs-on: ubuntu-latest
    needs: preprocess-data
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download preprocessed cache artifact
        uses: actions/download-artifact@v4
        with:
          name: preprocessed-cache
          path: cache/

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Install pandas-ta from source
        run: pip install git+https://github.com/aarigs/pandas-ta.git

      - name: Train RL agent
        run: python main.py --mode train-rl --start-date 2018-01-01 --end-date $(date +%Y-%m-%d)

      - name: Upload RL agent artifact
        uses: actions/upload-artifact@v4
        with:
          name: trading-agent
          path: trading_agent.zip

  deploy-agent-to-ec2:
    runs-on: ubuntu-latest
    needs: train-rl-agent
    steps:
      - name: Download RL agent artifact
        uses: actions/download-artifact@v4
        with:
          name: trading-agent
          path: .

      - name: Transfer RL agent to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.AWS_EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.AWS_SSH_PRIVATE_KEY }}
          source: "trading_agent.zip"
          target: "/home/ec2-user/"

  deploy-application-to-ec2:
    runs-on: ubuntu-latest
    needs: [build-and-push-to-dockerhub, deploy-agent-to-ec2]
    steps:
      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AWS_EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.AWS_SSH_PRIVATE_KEY }}
          script: |
            # Docker Hub에서 최신 이미지 pull
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/upbit-auto-bot:latest

            # 기존 컨테이너 중지 및 삭제 (실행 중인 경우)
            docker stop upbit-auto-bot-container || true
            docker rm upbit-auto-bot-container || true

            # 최신 이미지로 새 컨테이너 실행
            # UPBIT_ACCESS_KEY, UPBIT_SECRET_KEY, GEMINI_API_KEY는 GitHub Secrets에서 주입
            # trading_agent.zip 파일은 /home/ec2-user/ 에 있다고 가정하고 Docker 컨테이너에 마운트
            docker run -d --name upbit-auto-bot-container \
              -e UPBIT_ACCESS_KEY="${{ secrets.UPBIT_ACCESS_KEY }}" \
              -e UPBIT_SECRET_KEY="${{ secrets.UPBIT_SECRET_KEY }}" \
              -e GEMINI_API_KEY="${{ secrets.GEMINI_API_KEY }}" \
              -v /home/ec2-user/trading_agent.zip:/app/trading_agent.zip \
              ${{ secrets.DOCKERHUB_USERNAME }}/upbit-auto-bot:latest \
              python main.py --mode start-commander