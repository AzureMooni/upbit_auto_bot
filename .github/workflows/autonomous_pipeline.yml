# 워크플로우 이름
name: AI Commander v2.0 CI/CD Pipeline

# 실행 조건: main 브랜치에 push가 있을 때
on:
  push:
    branches:
      - main

# 환경 변수 설정
env:
  AWS_REGION: ap-southeast-1
  ECR_REPOSITORY: ai-commander-v2

# 작업들 정의
jobs:
  # 첫 번째 작업: Docker 이미지 빌드 및 ECR에 푸시
  build-and-push:
    name: Build and Push to ECR
    runs-on: ubuntu-latest

    # 권한 설정 (OIDC 사용)
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # OIDC를 사용하여 AWS 역할과 연동 (액세스 키 방식보다 안전)
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      # AWS ECR 로그인
      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # Docker 이미지 빌드 및 푸시
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  # 두 번째 작업: EC2에 배포
  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: build-and-push # build-and-push 작업이 성공해야만 실행됨

    steps:
      - name: Deploy to EC2 instance
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            # 1. 어떤 명령이라도 실패하면 즉시 중단합니다.
            set -e

            # 2. EC2에 부여된 IAM 역할을 사용하여 AWS ECR에 로그인합니다.
            # 이 단계에서는 GitHub Actions의 자격 증명이 필요 없습니다.
            aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com

            # 3. 이전에 실행 중이던 컨테이너가 있다면 중지하고 삭제합니다.
            docker stop upbit-bot || true
            docker rm upbit-bot || true

            # 4. ECR에서 최신 버전의 Docker 이미지를 내려받습니다.
            docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:${{ github.sha }}

            # 5. 최신 이미지를 사용하여 새 컨테이너를 백그라운드에서 실행합니다.
            docker run -d --name upbit-bot --restart always ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:${{ github.sha }}

            # 6. 사용하지 않는 오래된 Docker 이미지를 정리합니다 (디스크 용량 확보).
            docker image prune -af
