name: AI Commander v2.0 CI/CD Pipeline

on:
  push:
    branches:
      - main
  workflow_dispatch:

# ECR, AWS Region, etc.
env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: ai-commander-v2

permissions:
  id-token: write
  contents: read

jobs:
  build-and-push-to-ecr:
    name: Build and Push to ECR
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE_ARN }} # Assumes you have an OIDC role for GitHub Actions
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f Dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  deploy-to-ec2:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: build-and-push-to-ecr
    
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Deploy to EC2 instance
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AWS_EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.AWS_SSH_PRIVATE_KEY }}
          script: |
            echo "Deploying new version of AI Commander..."
            # 1. Pull the latest image from ECR
            docker pull ${{ needs.build-and-push-to-ecr.outputs.image }}
            
            # 2. Stop and remove the old container if it exists
            if [ "$(docker ps -q -f name=ai-commander)" ]; then
                docker stop ai-commander
                docker rm ai-commander
            fi
            
            # 3. Run the new container
            docker run -d --name ai-commander --restart always \
              -v /home/ec2-user/upbit_auto_bot/config:/app/config \
              -v /home/ec2-user/upbit_auto_bot/data:/app/data \
              -v /home/ec2-user/upbit_auto_bot/logs:/app/logs \
              ${{ needs.build-and-push-to-ecr.outputs.image }}
            
            echo "âœ… AI Commander v2.0 deployment successful!"