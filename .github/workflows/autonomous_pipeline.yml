# 워크플로우 이름
name: AI Commander v2.0 CI/CD Pipeline

# 실행 조건: main 브랜치에 push가 있을 때
on:
  push:
    branches:
      - main

# 워크플로우 전체에서 사용할 환경 변수
env:
  AWS_REGION: ap-southeast-1          # EC2 인스턴스가 있는 리전
  ECR_REPOSITORY: ai-commander-v2     # AWS ECR에 생성할 이미지 저장소 이름

# 실행할 작업들
jobs:
  # ===============================================
  # 작업 1: Docker 이미지 빌드 및 ECR에 업로드
  # ===============================================
  build-and-push:
    name: Build and Push to ECR
    runs-on: ubuntu-latest

    # 권한 설정 (OIDC 사용)
    permissions:
      id-token: write # OIDC 인증을 위해 필수
      contents: read

    steps:
      # 1. GitHub 저장소의 코드를 가져옵니다.
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. OIDC를 사용하여 GitHub Actions가 AWS에 안전하게 로그인합니다.
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      # 3. AWS ECR(Docker 이미지 저장소)에 로그인합니다.
      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # 4. Docker 이미지를 빌드하고, 태그를 붙여 ECR에 푸시(업로드)합니다.
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }} # 커밋 해시를 이미지 태그로 사용하여 버전을 관리
        run: |
          docker build --no-cache -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
