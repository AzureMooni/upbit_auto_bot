import asyncio
import joblib
from core.exchange import UpbitService
from preprocessor import DataPreprocessor  # For generate_features

# Í≥†ÎπàÎèÑ Ïä§Ï∫òÌïëÏùÑ ÏúÑÌïú ÌÉÄÍ≤ü ÏΩîÏù∏ Î™©Î°ù
SCALPING_TARGET_COINS = ["BTC/KRW", "ETH/KRW", "XRP/KRW", "SOL/KRW", "DOGE/KRW"]


class LiveTrader:
    """
    XGBoost Î™®Îç∏Í≥º Í∏∞Í≥ÑÏ†Å Í∑úÏπôÏóê Í∏∞Î∞òÌïú Í≥†ÎπàÎèÑ Ïä§Ï∫òÌïë Í±∞Îûò Ïã§ÌñâÍ∏∞.
    """

    def __init__(self, capital: float):
        self.initial_capital = capital
        self.upbit_service = UpbitService()
        self.model = None
        self.scaler = None
        self.target_coins = SCALPING_TARGET_COINS
        self.positions = {
            ticker: False for ticker in self.target_coins
        }  # ÏΩîÏù∏Î≥Ñ Ìè¨ÏßÄÏÖò Î≥¥Ïú† ÏÉÅÌÉú

    def _load_model(
        self, model_path="price_predictor.pkl", scaler_path="price_scaler.pkl"
    ):
        """ÌõàÎ†®Îêú XGBoost Î™®Îç∏Í≥º Ïä§ÏºÄÏùºÎü¨Î•º Î°úÎìúÌï©ÎãàÎã§."""
        try:
            self.model = joblib.load(model_path)
            self.scaler = joblib.load(scaler_path)
            print("‚úÖ XGBoost Î™®Îç∏ Î∞è Ïä§ÏºÄÏùºÎü¨ Î°úÎìú ÏôÑÎ£å.")
        except FileNotFoundError:
            print(
                f"Ïò§Î•ò: Î™®Îç∏ ÌååÏùº('{model_path}') ÎòêÎäî Ïä§ÏºÄÏùºÎü¨ ÌååÏùº('{scaler_path}')ÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§."
            )
            print("Î®ºÏ†Ä Î™®Îç∏ ÌõàÎ†®ÏùÑ Ïã§ÌñâÌïòÏÑ∏Ïöî.")
            raise

    async def _get_prediction(self, ticker: str):
        """Îã®Ïùº ÏΩîÏù∏Ïóê ÎåÄÌïú ÏòàÏ∏°ÏùÑ ÏàòÌñâÌï©ÎãàÎã§."""
        try:
            df = await self.upbit_service.get_ohlcv(ticker, timeframe="1m", limit=100)
            if df is None or df.empty:
                return None

            df_featured = DataPreprocessor.generate_features(df.copy())
            latest_features = df_featured.tail(1)

            features_to_predict = [
                "RSI_14",
                "BBL_20_2.0",
                "BBM_20_2.0",
                "BBU_20_2.0",
                "MACD_12_26_9",
                "MACDh_12_26_9",
                "MACDs_12_26_9",
            ]

            if latest_features[features_to_predict].isnull().values.any():
                return None  # ÏßÄÌëúÍ∞Ä NaNÏù¥Î©¥ ÏòàÏ∏° Î∂àÍ∞Ä

            scaled_features = self.scaler.transform(
                latest_features[features_to_predict]
            )
            prediction = self.model.predict(scaled_features)
            return prediction[0]
        except Exception as e:
            print(f"  - {ticker} ÏòàÏ∏° Ï§ë Ïò§Î•ò: {e}")
            return None

    async def _manage_position(self, ticker: str, entry_price: float, quantity: float):
        """Îß§ÏàòÎêú Ìè¨ÏßÄÏÖòÏóê ÎåÄÌïú ÏùµÏ†à/ÏÜêÏ†àÏùÑ Í¥ÄÎ¶¨Ìï©ÎãàÎã§ (Simulated OCO)."""
        print(
            f"  - [Position] {ticker} Ìè¨ÏßÄÏÖò Í¥ÄÎ¶¨ ÏãúÏûë. ÏßÑÏûÖÍ∞Ä: {entry_price:,.0f}, ÏàòÎüâ: {quantity}"
        )
        take_profit_price = entry_price * 1.005
        stop_loss_price = entry_price * 0.996

        while self.positions[ticker]:
            try:
                current_price = await self.upbit_service.get_current_price(ticker)
                if current_price is None:
                    await asyncio.sleep(1)
                    continue

                if current_price >= take_profit_price:
                    print(f"  - [SUCCESS] {ticker} ÏùµÏ†à! (+0.5%)")
                    await self.upbit_service.create_market_sell_order(ticker, quantity)
                    break

                if current_price <= stop_loss_price:
                    print(f"  - [FAILURE] {ticker} ÏÜêÏ†à! (-0.4%)")
                    await self.upbit_service.create_market_sell_order(ticker, quantity)
                    break

            except Exception as e:
                print(f"  - {ticker} Ìè¨ÏßÄÏÖò Í¥ÄÎ¶¨ Ï§ë Ïò§Î•ò: {e}")
                break
            await asyncio.sleep(1)  # 1Ï¥àÎßàÎã§ Í∞ÄÍ≤© ÌôïÏù∏

        self.positions[ticker] = False
        print(f"  - [Position] {ticker} Ìè¨ÏßÄÏÖò Ï¢ÖÎ£å.")

    async def run(self):
        """Í≥†ÎπàÎèÑ Ïä§Ï∫òÌïë Í±∞Îûò Î°úÏßÅÏùÑ Ïã§ÌñâÌï©ÎãàÎã§."""
        self._load_model()
        await self.upbit_service.connect()
        print("üöÄ Í≥†ÎπàÎèÑ ÌÄÄÌä∏ Ïä§Ï∫òÌïë ÏãúÏä§ÌÖú Í∞ÄÎèô...")

        while True:
            try:
                # Ïù¥ÎØ∏ Ìè¨ÏßÄÏÖòÏùÑ Î≥¥Ïú†Ìïú ÏΩîÏù∏ÏùÄ ÏòàÏ∏°ÏóêÏÑú Ï†úÏô∏
                coins_to_scan = [
                    ticker for ticker, held in self.positions.items() if not held
                ]
                if not coins_to_scan:
                    await asyncio.sleep(10)  # Î™®Îì† ÏΩîÏù∏ Ìè¨ÏßÄÏÖò Î≥¥Ïú† Ïãú 10Ï¥à ÎåÄÍ∏∞
                    continue

                # Ïó¨Îü¨ ÏΩîÏù∏Ïóê ÎåÄÌïú ÏòàÏ∏°ÏùÑ ÎèôÏãúÏóê ÏàòÌñâ
                prediction_tasks = [
                    self._get_prediction(ticker) for ticker in coins_to_scan
                ]
                predictions = await asyncio.gather(*prediction_tasks)

                for ticker, prediction in zip(coins_to_scan, predictions):
                    if prediction == 1:  # 1: Îß§Ïàò Ïã†Ìò∏
                        print(
                            f"üî• [Signal] {ticker}ÏóêÏÑú Îß§Ïàò Ïã†Ìò∏ Ìè¨Ï∞©! Ï¶âÏãú Í±∞Îûò Ïã§Ìñâ."
                        )

                        balance = await self.upbit_service.get_balance("KRW")
                        capital_for_trade = balance * 0.5  # Í∞ÄÏö© ÏûêÎ≥∏Ïùò 50% ÏÇ¨Ïö©

                        if capital_for_trade < 5000:  # ÏµúÏÜå Ï£ºÎ¨∏ Í∏àÏï°
                            print("  - Í≤ΩÍ≥†: Ï£ºÎ¨∏ Í∞ÄÎä• Í∏àÏï°Ïù¥ Î∂ÄÏ°±Ìï©ÎãàÎã§.")
                            continue

                        order = await self.upbit_service.create_market_buy_order(
                            ticker, capital_for_trade
                        )
                        if order and order.get("status") == "closed":
                            entry_price = order.get(
                                "average",
                                await self.upbit_service.get_current_price(ticker),
                            )
                            quantity = order.get(
                                "filled", capital_for_trade / entry_price
                            )
                            self.positions[ticker] = True
                            asyncio.create_task(
                                self._manage_position(ticker, entry_price, quantity)
                            )
                            # Ìïú Î≤àÏóê ÌïòÎÇòÏùò Ìè¨ÏßÄÏÖòÎßå ÏßÑÏûÖ
                            break

                await asyncio.sleep(60)  # 1Î∂ÑÎßàÎã§ ÏÉàÎ°úÏö¥ Ï∫îÎì§ ÌôïÏù∏

            except Exception as e:
                print(f"Î©îÏù∏ Î£®ÌîÑ Ïò§Î•ò: {e}")
                await asyncio.sleep(60)


if __name__ == "__main__":
    trader = LiveTrader(capital=50000)
    asyncio.run(trader.run())
